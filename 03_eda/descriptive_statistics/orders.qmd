# documents ( commandes )

Ce chapitre présente une analyse descriptive des commandes.

## Vue d'ensemble des commandes et préparations des données

### Résumé de la table

```{r}
library(naniar)
library(dplyr)
library(ggplot2)
library(purrr)

load("C:/Users/datch/Desktop/aviviaMandatDoc/data/cleaned/documents.RData")
load("C:/Users/datch/Desktop/aviviaMandatDoc/data/cleaned/kits.RData")
load("C:/Users/datch/Desktop/aviviaMandatDoc/data/cleaned/projets.RData")
load("C:/Users/datch/Desktop/aviviaMandatDoc/data/cleaned/addresses.RData")


```

```{r}
commandes <- documents |> filter(sorte == 'Comm') #  sélectionner les documents de type commandes
kitsCommandes <- kits |> filter(!is.na(commande)) |> mutate(contrat = NULL) # selectionner les kits commandés
commandesTable <- left_join(commandes,kitsCommandes,by = c("code" = "commande"), suffix = c("comm" ,"kit")) |> mutate(commande = NULL,sorte  = NULL) # jointure entre commandes et kitscommandes pour avoir une table unique et plus exhaustive

projets <- left_join(projets,addresses,by = c("code" = "projet"),suffix = c("projet","addr")) |> mutate(projet =NULL) # jointure avec la table projets , adresses


## on obtient donc une table unique contenant de façons exhaustive toute les informations sur les commande
```

### Gestion des valeurs manquantes ( NA )

#### commandes

```{r}
commandesTable |> glimpse()

```

#### variables quantitatives

```{r }

varQuantitativesComm <- commandesTable |> select(where(is.numeric)) 
varQuantitativesComm|>vis_miss() +
  labs(title = "Graphe de visualisation du nombres de valeurs manquantes par variable")



```

##### solution

###### garder les variables ayants leurs valeurs présentent \> 50 %

```{r}
varQuantitativesComm <- varQuantitativesComm |>  
   select(where(~ sum(!is.na(.x)) > nrow(varQuantitativesComm) * 0.5))   
varQuantitativesComm |> vis_miss()

varQuantitativesComm |> questionr::look_for()
```

###### solution d'imputation des données : k-nearest neighbors (knn) :

Pour chaque observation avec des valeurs manquantes, identifier les k observations les plus proches parmi celles qui ont des valeurs complètes pour les variables concernées. Utiliser les valeurs des voisins (la moyenne (ou la médiane)) pour imputer la valeur manquante :

```{r}
library(VIM)
result <- kNN(varQuantitativesComm,k=7)
varQuantitativesComm <-   result[, 1:ncol(varQuantitativesComm)]

# graphe 2
naniar::vis_miss(varQuantitativesComm) + labs(
  title = "représentation de la structure des colonnes où les données sont absentes.", y = "obserations", x = "colonnes"
)
varQuantitativesComm |> glimpse() # resumé de la table imputé
```

#### variables quanlitatives

```{r}
varQualitativesComm <- commandesTable |> select(where(is.factor)) 
varQualitativesComm|>vis_miss() +
  labs(title = "Graphe de visualisation du nombres de valeurs manquantes par variable")

varQualitativesComm |> questionr::look_for()

```

###### solution d'imputation des données : création d'une catégorie "Non renseigne" pour ensuite essayer de comprendre etudier les raisons

```{r}

library(forcats)

varQualitativesComm <- varQualitativesComm |>
  mutate(across(
    where(is.factor),
    ~ forcats::fct_explicit_na(., na_level = "non renseigné")
  ))

varQualitativesComm |> questionr::look_for()

```

## Distribution des commandes par montant

\[Analyse de la distribution des commandes par montant\]

## Évolution temporelle des commandes

\[Analyse de l'évolution temporelle des commandes\]

## Commandes par canal

\[Analyse de la répartition des commandes par canal\]

## Commandes par région

\[Analyse de la répartition des commandes par région\]

## Taux de conversion

\[Analyse des taux de conversion\]

## Synthèse de l'analyse des commandes

\[Synthèse des principales observations et conclusions concernant les commandes\]
