---
title: "Description et nettoyage des données de contrats"
format: html
---

# Prévisualisation de la table contrats

```{r}
library(tidyverse)

# Chargement des données
load("C:/Users/datch/Desktop/aviviaMandatDoc/data/contrats.RData")

# Extraction de la table
contrats <- contrats$Contrat

# Aperçu des variables
glimpse(contrats)
```

# Nettoyage et transformation

```{r}
# Fonctions de nettoyage personnalisées

# Supprime les caractères spéciaux dans les noms de colonnes
dropColunmSpecialChr <- function(tbl){
  rename_with(tbl, ~ gsub("[^A-Za-z0-9]", "", .))
}

# Met les noms de colonnes en minuscules
castColunmToLower <- function(tbl){
  rename_with(tbl, ~ tolower(.))
}

# Supprime les colonnes entièrement vides
cleanEmpytColumn <- function(tbl){
  select(tbl, where(~ !all(is.na(.))))
}

# Supprime les doublons
cleanDuplicateRows <- function(tbl){
  distinct(tbl)
}

# Nettoie les caractères spéciaux dans les valeurs textuelles
cleanSpecialChar <- function(x){
  if (is.character(x) || is.factor(x)) {
    x <- as.character(x) |>
      str_replace_all("[^[:alnum:] ,._-]", "") |>
      str_squish() |>
      na_if("")
  }
  return(x)
}

# Application des fonctions de nettoyage
contrats <- contrats |> 
  dropColunmSpecialChr() |>
  castColunmToLower() |>
  cleanEmpytColumn() |>
  cleanDuplicateRows() |>
  mutate(across(everything(), cleanSpecialChar))

# Extraction des pourcentages des acomptes et nettoyage des champs


# Nettoyage spécifique et transformations
contrats <- contrats |> mutate(
    prisemesure = gsub("priseDeMesure", "", prisemesure),
    aveclivraison = gsub("true|false", "", aveclivraison),
    aveclivraison = ifelse(aveclivraison == "1", "true", "false"),
    assemblage = ifelse(assemblage == "Assemble", "true", "false"),
    nbjourvalide = gsub("true|false", "", nbjourvalide),
    typeclient = gsub("true|false", "", typeclient)
    
  ) |>
  mutate(across(
    .cols = starts_with(c("date", "pourc", "nbjour")),
    .fns = ~ str_remove_all(., "[A-Za-z]")
  )) 

# Sélection des variables utiles et conversion des types
vars_utiles <- c(
  "nomclient", "projet", "typeclient", "roleproprietaire", "validcred",
  "code", "sorte", "datevalidite", "datedebvalidite", "datecreation", 
  "datereqexped", "dateprevexped",
  "emplacementcre", "nbjourvalide", "qteitems", "qteitemscab", "ligne", 
  "aveclivraison", "avertlivraison", "codepost", "codepostfinal", 
  "installation", "prisemesure", "assemblage", "edgecolle", "gamme", 
  "cleitem", "lumieres", "type", "typeprocess", "division", 
  "codetaxe", "codetaxe2","totalescompte", "pourcesc", "soustotal", 
  "tauxtaxe", "tauxtaxe2", "totaltx1", "totaltx2", "totalesc", "totalht", 
  "total"
)

contrats <- contrats |>
  select(all_of(vars_utiles)) |>
  relocate(all_of(vars_utiles))

# Conversion des types
contrats <- contrats |>
  mutate(across(
    c(datevalidite, datedebvalidite, datecreation, datereqexped, 
      dateprevexped),
    ~ ymd(., quiet = TRUE)
  )) |>
  mutate(across(
    c(pourcesc, soustotal, tauxtaxe, tauxtaxe2, 
      total, totalht, totaltx1, totaltx2),
    ~ as.integer(gsub("[^0-9.-]", "", .))
  )) |>
  mutate(across(
    c(qteitems, qteitemscab, nbjourvalide, cleitem),
    ~ as.integer(.)
  )) |>
  mutate(across(
    c(aveclivraison, installation, prisemesure, assemblage, validcred),
    ~ as.logical(case_when(
      . %in% c("1", "true", "vrai", "o") ~ TRUE,
      . %in% c("0", "false", "faux", "n") ~ FALSE,
      TRUE ~ NA
    ))
  )) |>
  mutate(across(
    c(nomclient, projet, typeclient, roleproprietaire, codepost, 
      codepostfinal, edgecolle, gamme, lumieres, type, typeprocess, 
      avertlivraison, emplacementcre, division, codetaxe, codetaxe2, 
      ligne, code),
    ~ {
      x <- gsub("true|false", "", .) 
      x <- str_squish(x)
      x <- tolower(x)
      factor(x)
    }
  ))

# Structure finale de la table
str(contrats)
```

# Gestion des valeurs manquantes

```{r}
library(naniar)
```

## Visualisation des valeurs manquantes - variables quantitatives

```{r}
varQuantitatives <- contrats |> select(where(is.numeric))
varQuantitatives |> vis_miss()
```

## Imputation KNN (valeurs numériques)

```{r}
library(VIM)

# Remplacement des NA par moyenne des 5 plus proches voisins
varQuantitatives <- kNN(varQuantitatives, k = 5, imp_var = FALSE)
varQuantitatives <- varQuantitatives[, names(varQuantitatives)]
vis_miss(varQuantitatives)
questionr::look_for(varQuantitatives)
```

## Valeurs manquantes - variables qualitatives

```{r}
varQualitatives <- contrats |> select(where(is.factor))
varQualitatives |> vis_miss()
```

### Solution : ajout d'une modalité "non_renseigne"

```{r}
varQualitatives <- varQualitatives |>
  mutate(across(
    everything(),
    ~ fct_na_value_to_level(as.factor(.), level = "manquant")
  ))

varQualitatives |> vis_miss()
```

## Valeurs manquantes - variables logiques

```{r}
varsLogical <- contrats |> select(where(is.logical))
varsLogical |> vis_miss()
```

### Solution : remplacement par la modalité la plus fréquente

```{r}
varsLogical <- varsLogical |>
  mutate(across(
    everything(),
    ~ {
      mode_value <- names(sort(table(.), decreasing = TRUE))[1]
      replace(., is.na(.), mode_value)
    }
  ))
vis_miss(varsLogical)
```

## Données temporelles manquantes

```{r}
dates <- contrats |> select(where(lubridate::is.Date))
dates |> vis_miss()
```

### Suppression des colonnes avec plus de 40 % de valeurs manquantes

```{r}
dates <- dates |>
  select(where(~ mean(is.na(.x)) <= 0.4))
vis_miss(dates)
```

## Sauvegarde des données nettoyées

```{r}
# Réintégration des jeux de données nettoyés
contrats <- contrats |>
  mutate(across(all_of(names(varQuantitatives)), ~ varQuantitatives[[cur_column()]])) |>
  mutate(across(all_of(names(varQualitatives)), ~ varQualitatives[[cur_column()]])) |>
  mutate(across(all_of(names(varsLogical)), ~ varsLogical[[cur_column()]])) |>
  mutate(across(all_of(names(dates)), ~ dates[[cur_column()]]))

# Suppression finale des variables avec trop de NA
contrats <- contrats |>
  select(where(~ mean(is.na(.x)) <= 0.4))

# Sauvegarde au format RData
save(contrats, file = "../data/transformed/contrats.RData")

# Vérification finale
glimpse(contrats)
vis_miss(contrats)


```
